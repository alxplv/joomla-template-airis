// Generic Airis JavaScript
document.addEventListener("DOMContentLoaded", (event) => {

	CreateResponsiveMainMenuSubmenuToggleButtons();

	LoadLazyStylesheets();

}, { passive: true });

jQuery(function () {

	AddRussianLocalizationForFancybox();

	ApplyStandaloneFancybox3ToSigplusGalleries();

});

function AddRussianLocalizationForFancybox() {

	if (typeof jQuery.fancybox === "function" && jQuery("html").attr("lang").indexOf("ru") === 0) {

		jQuery.fancybox.defaults.i18n.ru = {
			CLOSE: "Закрыть",
			NEXT: "Следующий элемент",
			PREV: "Предыдущий элемент",
			ERROR: "Ошибка загрузки содержимого. <br/> Попробуйте повторить позже.",
			PLAY_START: "Начать слайд-шоу",
			PLAY_STOP: "Приостановить слайд-шоу",
			FULL_SCREEN: "Полноэкранный режим",
			THUMBS: "Эскизы",
			DOWNLOAD: "Скачать",
			SHARE: "Поделиться",
			ZOOM: "Масштаб"
		}

		jQuery.fancybox.defaults.lang = "ru";
	}
}

function ApplyStandaloneFancybox3ToSigplusGalleries() {

	if (typeof jQuery.fancybox === "function") {

		var $sigplusImageFancyboxCaptionsCreated = false;

		jQuery(".sigplus-gallery").on("click", ".sigplus-image", function () {

			// Create fancyBox captions for sigplus images acquired from its labels.txt file
			if ($sigplusImageFancyboxCaptionsCreated === false) {

				var $sigplusImagesWithTitle = jQuery(".sigplus-image[title]");

				if ($sigplusImagesWithTitle.length !== 0) {
					$sigplusImagesWithTitle.each(function () {
						var $currentSigplusImageWithTitle = jQuery(this);
						$currentSigplusImageWithTitle.attr("data-caption", $currentSigplusImageWithTitle.attr("title"));
					});

					$sigplusImageFancyboxCaptionsCreated = true;
				}
			}

			var $currentSigplusImage = jQuery(this);

			jQuery.fancybox.open($currentSigplusImage.parents(".sigplus-gallery").first().find(".sigplus-image"), null, $currentSigplusImage.parent().index());
		});

	} else {

		jQuery(".sigplus-gallery").on("click", ".sigplus-image", function () {
			window.open(this.href);
		});

		console.error("fancyBox not loaded.");
	}
}

function CreateDoubleGisWidgetMap(containerId, mapLatitude, mapLongitude, mapOrganizationId, mapCity, mapBorderColor, mapWidth, mapHeight, mapZoomLevel) {

	if (typeof DGWidgetLoader === "undefined") {
		console.error("DGWidgetLoader not found.");
		return;
	}

	if (typeof containerId === "string") {

		// Make containerId value compatible with getElementById()
		if (containerId.charAt(0) === "#") {
			containerId = containerId.slice(1);
		}
	} else {
		return;
	}

	const mapContainer = document.getElementById(containerId);
	if (mapContainer === undefined) {
		return;
	}

	if (typeof mapBorderColor !== "string" || mapBorderColor === "") {
		mapBorderColor = "#a3a3a3";
	}

	if (typeof mapWidth !== "string" || mapWidth === "") {
		mapWidth = "100%";
	}

	if (Number.isInteger(mapHeight) === false || mapHeight < 0) {
		mapHeight = 400;
	}

	if (Number.isInteger(mapZoomLevel) === false || mapZoomLevel < 0) {
		mapZoomLevel = 16;
	}

	let mapHtml;

	// DGWidgetLoader() uses document.write() which is not supported with deferred script loading so it is required to capture all output by temporarily redefining the method
	const documentWriteTempHandler = document.write;

	document.write = (widgetOutput) => {
		mapHtml = widgetOutput;
	}

	new DGWidgetLoader({
		"width": mapWidth,
		"height": mapHeight,
		"borderColor": mapBorderColor,
		"pos": {
			"lat": mapLatitude,
			"lon": mapLongitude,
			"zoom": mapZoomLevel
		},
		"opt": {
			"city": mapCity
		},
		"org": [{
			"id": mapOrganizationId
		}]
	});

	mapContainer.insertAdjacentHTML("beforeend", mapHtml);

	document.write = documentWriteTempHandler;
}

function CreateResponsiveMainMenuSubmenuToggleButtons() {

	var $parentMenuItem = jQuery(".navbar .parent").not(".has-nav-child-toggle-link");
	if ($parentMenuItem.length === 0) {
		return;
	}

	$parentMenuItem.addClass("has-nav-child-toggle-link");

	var $parentMenuItemLink = $parentMenuItem.children("a");
	var toggleButtonIconClass = typeof Joomla.getOptions("tpl_airis").useFontAwesome !== "undefined" ? "fas fa-chevron-down" : "airis-chevron airis-chevron-bottom";
	var toggleButtonHtml = "<div class=\"nav-child-toggle\"><a class=\"nav-child-toggle-link\" title=\"" + Joomla.JText._("TPL_AIRIS_MAIN_MENU_CHILD_MENU_TOGGLE_BTN_TITLE") + "\"><span class=\"" + toggleButtonIconClass + "\" aria-hidden=\"true\"></span></a></div>";

	$parentMenuItemLink.after(toggleButtonHtml);

	$parentMenuItemLink.next(".nav-child-toggle").children(".nav-child-toggle-link").on("click", function () {
		jQuery(this).toggleClass("nav-child-toggle-link-active").parent().next().toggleClass("nav-child-displayed");
	});
}

function DisplayArticleInFancybox(articleId, modalClass) {

	// Article IDs start with 1
	if (Number.isInteger(articleId) === false || articleId <= 0) {
		console.error("Incorrect article ID.");
		return;
	}

	if (typeof jQuery.fancybox === "undefined") {
		console.error("fancyBox not loaded.");
		return;
	}

	if (typeof modalClass !== "string" || modalClass === "") {
		modalClass = "airis-lightbox-article";
	}

	jQuery.get("/index.php", { option: "com_content", view: "article", id: articleId, tmpl: "component" }).done(function (data) {

		var $articleContent = jQuery(data).find(".item-page");

		if ($articleContent.length !== 0) {

			jQuery.fancybox.open({
				src: $articleContent,
				type: "html",
				autoFocus: false,
				baseClass: modalClass
			});

		} else {
			console.error("Article ID " + articleId + " has no content.");
		}

	}).fail(function () {
		console.error("Unable to request article ID " + articleId + ".");
	});
}

function DisplayMenuItemAliasInFancybox(itemAlias, modalHeight, modalWidth, autoFocus, modalClass) {

	if (typeof itemAlias !== "string" || itemAlias === "") {
		console.error("Incorrect item alias.");
		return;
	}

	if (typeof jQuery.fancybox === "undefined") {
		console.error("fancyBox not loaded.");
		return;
	}

	// Fractional values for rems are allowed
	if (typeof modalHeight !== "number" || parseFloat(modalHeight) === false) {
		modalHeight = 24;
	}

	if (typeof modalWidth !== "number" || parseFloat(modalWidth) === false) {
		modalWidth = 32;
	}

	if (typeof autoFocus !== "boolean") {
		autoFocus = true;
	}

	if (typeof modalClass !== "string" || modalClass === "") {
		modalClass = "airis-lightbox-iframe";
	}

	jQuery.fancybox.open({
		src: "/" + itemAlias + "?tmpl=component",
		type: "iframe",
		autoFocus: autoFocus,
		baseClass: modalClass,
		smallBtn: true,
		iframe: {
			preload: false,
			css: {
				width: modalWidth + "rem",
				height: modalHeight + "rem"
			}
		}
	});
}

function DisplayMenuItemInFancybox(itemId, modalHeight, modalWidth, autoFocus, modalClass) {

	// Menu item IDs start with 101
	if (Number.isInteger(itemId) === false || itemId <= 100) {
		console.error("Incorrect menu item ID.");
		return;
	}

	if (typeof jQuery.fancybox === "undefined") {
		console.error("fancyBox not loaded.");
		return;
	}

	// Apply certain defaults if required, float values are allowed
	if (typeof modalHeight !== "number" || parseFloat(modalHeight) === false) {
		modalHeight = 24;
	}

	if (typeof modalWidth !== "number" || parseFloat(modalWidth) === false) {
		modalWidth = 32;
	}

	if (typeof autoFocus !== "boolean") {
		autoFocus = true;
	}

	// Suitable for additional stying and scripting
	if (typeof modalClass !== "string" || modalClass === "") {
		modalClass = "airis-lightbox-iframe";
	}

	jQuery.fancybox.open({
		src: "/index.php?Itemid=" + itemId + "&tmpl=component",
		type: "iframe",
		autoFocus: autoFocus,
		baseClass: modalClass,
		smallBtn: true,
		iframe: {
			preload: false,
			css: {
				width: modalWidth + "rem",
				height: modalHeight + "rem"
			}
		}
	});
}

function LoadLazyStylesheets() {
	document.head.querySelectorAll("[rel=\"lazy-stylesheet\"]").forEach((element) => {
		element.rel = "stylesheet";
	});
}

function CreateBootstrapToast(content = "", header = "", delay = 5000, autohide = true, animation = true) { // BS defaults

	// Guard statements
	if (typeof bootstrap === "undefined") {
		console.error("Bootstrap API not found.");
		return;
	}

	if (typeof Joomla.getOptions("tpl_airis").useBootstrapJsComponentToasts === "undefined") {
		console.error("Bootstrap Toasts component not found.");
		return;
	}

	if ((typeof content !== "number" && typeof content !== "string") || content === "") {
		console.error("No toast content provided.");
		return;
	}

	if (Number.isInteger(delay) === false || delay < 0) {
		delay = 5000;
	}

	if (typeof autohide !== "boolean") {
		autohide = true;
	}

	if (typeof animation !== "boolean") {
		animation = true;
	}

	const toastContainer = document.querySelector(".airis-area-toasts");
	if (toastContainer === undefined) {
		console.error("Bootstrap Toasts container not found in DOM.");
		return;
	}

	// This will hold the toast
	let toastHtml = "";

	// Headerless toasts use simplified markup
	if (typeof header === "string" && header !== "") {

		// Acquire current time to be used in toast header as suggested by BS docus
		const currentDateAndTime = new Date();
		const currentTime = [
			padTimeNumbers(currentDateAndTime.getHours()),
			padTimeNumbers(currentDateAndTime.getMinutes()),
			padTimeNumbers(currentDateAndTime.getSeconds()),
		].join(":");

		toastHtml = [
			"<div class=\"airis__toast toast\" role=\"alert\" aria-atomic=\"true\">",
			"<div class=\"airis__toast-header toast-header\">",
			// "<img src=\"\" class=\"airis__toast-header-image rounded me-2\" alt=\"\">", // TODO: Could possibly use a favicon's URI and J!'s sitename strings here
			"<span class=\"airis__toast-header-text me-auto\">" + header + "</span>",
			"<small class=\"airis__toast-date\">" + currentTime + "</small>",
			"<button type=\"button\" class=\"airis__toast-button-close btn-close\" title=\"" + Joomla.JText._("JCLOSE") + "\" data-bs-dismiss=\"toast\" aria-label=\"" + Joomla.JText._("JCLOSE") +"\"></button>",
			"</div>",
			"<div class=\"airis__toast-body toast-body\">" + content + "</div>",
			"</div>",
		].join("");
	} else {
		toastHtml = [
			"<div class=\"airis__toast toast\" role=\"alert\" aria-atomic=\"true\">",
			"<div class=\"d-flex\">",
			"<div class=\"airis__toast-body toast-body\">" + content + "</div>",
			"<button type=\"button\" class=\"airis__toast-button-close btn-close me-2 m-auto\" title=\"" + Joomla.JText._("JCLOSE") + "\" data-bs-dismiss=\"toast\" aria-label=\"" + Joomla.JText._("JCLOSE") + "\"></button>",
			"</div>",
			"</div>",
		].join("");
	}

	// Append the created HTML structure to the very end of our toast container
	toastContainer.insertAdjacentHTML("beforeend", toastHtml);

	// Initialize the Bootstrap API for the last added toast
	const lastCreatedToast = new bootstrap.Toast(
		toastContainer.lastChild,
		{
			"delay": delay,
			"autohide": autohide,
			"animation": animation,
		},
	);

	// And display it
	lastCreatedToast.show();
}

// To be used with Date() object-derived values while we cannot reliably use String.prototype.padStart()
function padTimeNumbers(timeNumber) {

	if (typeof timeNumber !== "number" && typeof timeNumber !== "string") {
		return false;
	}

	if (timeNumber < 10) {
		timeNumber = "0" + String(timeNumber);
	}

	return timeNumber;
}